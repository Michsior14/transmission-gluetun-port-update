name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: false # golangci-lint-action does caching

      - name: Lint
        uses: golangci/golangci-lint-action@v3

  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Test
        run: go test -race -v ./...

  build:
    if: ${{ !startsWith(github.event.ref, 'refs/tags/v') }}
    name: Build
    needs: [lint, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        os: ["linux", "darwin"]
        arch: ["amd64", "arm64"]
    env:
      app: transmission-gluetun-port.${{ matrix.os }}-${{ matrix.arch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Build
        run: go build -o ${{ env.app }} -v ./...
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.app }}
          path: ${{ env.app }}
          if-no-files-found: error

  release:
    if: ${{ startsWith(github.event.ref, 'refs/tags/v') }}
    name: Release
    needs: [lint, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
